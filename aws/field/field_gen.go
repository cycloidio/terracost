// Code generated by "enumer -type=Field -output=field_gen.go -linecomment"; DO NOT EDIT.

package field

import (
	"fmt"
	"strings"
)

const _FieldName = "SKUOfferTermCodeRateCodeTermTypePriceDescriptionEffectiveDateStartingRangeEndingRangeUnitPricePerUnitCurrencyLeaseContractLengthPurchaseOptionOfferingClassProduct FamilyserviceCodeLocationInstance TypeStorage MediaVolume TypeTenancyOperating SystemusageTypeCapacityStatusPre Installed S/WVolume API Name"

var _FieldIndex = [...]uint16{0, 3, 16, 24, 32, 48, 61, 74, 85, 89, 101, 109, 128, 142, 155, 169, 180, 188, 201, 214, 225, 232, 248, 257, 271, 288, 303}

const _FieldLowerName = "skuoffertermcoderatecodetermtypepricedescriptioneffectivedatestartingrangeendingrangeunitpriceperunitcurrencyleasecontractlengthpurchaseoptionofferingclassproduct familyservicecodelocationinstance typestorage mediavolume typetenancyoperating systemusagetypecapacitystatuspre installed s/wvolume api name"

func (i Field) String() string {
	if i >= Field(len(_FieldIndex)-1) {
		return fmt.Sprintf("Field(%d)", i)
	}
	return _FieldName[_FieldIndex[i]:_FieldIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FieldNoOp() {
	var x [1]struct{}
	_ = x[SKU-(0)]
	_ = x[OfferTermCode-(1)]
	_ = x[RateCode-(2)]
	_ = x[PurchaseOption-(3)]
	_ = x[PriceDescription-(4)]
	_ = x[EffectiveDate-(5)]
	_ = x[StartingRange-(6)]
	_ = x[EndingRange-(7)]
	_ = x[Unit-(8)]
	_ = x[PricePerUnit-(9)]
	_ = x[Currency-(10)]
	_ = x[TermLength-(11)]
	_ = x[TermPurchaseOption-(12)]
	_ = x[TermOfferingClass-(13)]
	_ = x[ProductFamily-(14)]
	_ = x[ServiceCode-(15)]
	_ = x[Location-(16)]
	_ = x[InstanceType-(17)]
	_ = x[StorageMedia-(18)]
	_ = x[VolumeType-(19)]
	_ = x[Tenancy-(20)]
	_ = x[OperatingSystem-(21)]
	_ = x[UsageType-(22)]
	_ = x[CapacityStatus-(23)]
	_ = x[PreInstalledSW-(24)]
	_ = x[VolumeAPIName-(25)]
}

var _FieldValues = []Field{SKU, OfferTermCode, RateCode, PurchaseOption, PriceDescription, EffectiveDate, StartingRange, EndingRange, Unit, PricePerUnit, Currency, TermLength, TermPurchaseOption, TermOfferingClass, ProductFamily, ServiceCode, Location, InstanceType, StorageMedia, VolumeType, Tenancy, OperatingSystem, UsageType, CapacityStatus, PreInstalledSW, VolumeAPIName}

var _FieldNameToValueMap = map[string]Field{
	_FieldName[0:3]:          SKU,
	_FieldLowerName[0:3]:     SKU,
	_FieldName[3:16]:         OfferTermCode,
	_FieldLowerName[3:16]:    OfferTermCode,
	_FieldName[16:24]:        RateCode,
	_FieldLowerName[16:24]:   RateCode,
	_FieldName[24:32]:        PurchaseOption,
	_FieldLowerName[24:32]:   PurchaseOption,
	_FieldName[32:48]:        PriceDescription,
	_FieldLowerName[32:48]:   PriceDescription,
	_FieldName[48:61]:        EffectiveDate,
	_FieldLowerName[48:61]:   EffectiveDate,
	_FieldName[61:74]:        StartingRange,
	_FieldLowerName[61:74]:   StartingRange,
	_FieldName[74:85]:        EndingRange,
	_FieldLowerName[74:85]:   EndingRange,
	_FieldName[85:89]:        Unit,
	_FieldLowerName[85:89]:   Unit,
	_FieldName[89:101]:       PricePerUnit,
	_FieldLowerName[89:101]:  PricePerUnit,
	_FieldName[101:109]:      Currency,
	_FieldLowerName[101:109]: Currency,
	_FieldName[109:128]:      TermLength,
	_FieldLowerName[109:128]: TermLength,
	_FieldName[128:142]:      TermPurchaseOption,
	_FieldLowerName[128:142]: TermPurchaseOption,
	_FieldName[142:155]:      TermOfferingClass,
	_FieldLowerName[142:155]: TermOfferingClass,
	_FieldName[155:169]:      ProductFamily,
	_FieldLowerName[155:169]: ProductFamily,
	_FieldName[169:180]:      ServiceCode,
	_FieldLowerName[169:180]: ServiceCode,
	_FieldName[180:188]:      Location,
	_FieldLowerName[180:188]: Location,
	_FieldName[188:201]:      InstanceType,
	_FieldLowerName[188:201]: InstanceType,
	_FieldName[201:214]:      StorageMedia,
	_FieldLowerName[201:214]: StorageMedia,
	_FieldName[214:225]:      VolumeType,
	_FieldLowerName[214:225]: VolumeType,
	_FieldName[225:232]:      Tenancy,
	_FieldLowerName[225:232]: Tenancy,
	_FieldName[232:248]:      OperatingSystem,
	_FieldLowerName[232:248]: OperatingSystem,
	_FieldName[248:257]:      UsageType,
	_FieldLowerName[248:257]: UsageType,
	_FieldName[257:271]:      CapacityStatus,
	_FieldLowerName[257:271]: CapacityStatus,
	_FieldName[271:288]:      PreInstalledSW,
	_FieldLowerName[271:288]: PreInstalledSW,
	_FieldName[288:303]:      VolumeAPIName,
	_FieldLowerName[288:303]: VolumeAPIName,
}

var _FieldNames = []string{
	_FieldName[0:3],
	_FieldName[3:16],
	_FieldName[16:24],
	_FieldName[24:32],
	_FieldName[32:48],
	_FieldName[48:61],
	_FieldName[61:74],
	_FieldName[74:85],
	_FieldName[85:89],
	_FieldName[89:101],
	_FieldName[101:109],
	_FieldName[109:128],
	_FieldName[128:142],
	_FieldName[142:155],
	_FieldName[155:169],
	_FieldName[169:180],
	_FieldName[180:188],
	_FieldName[188:201],
	_FieldName[201:214],
	_FieldName[214:225],
	_FieldName[225:232],
	_FieldName[232:248],
	_FieldName[248:257],
	_FieldName[257:271],
	_FieldName[271:288],
	_FieldName[288:303],
}

// FieldString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FieldString(s string) (Field, error) {
	if val, ok := _FieldNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _FieldNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Field values", s)
}

// FieldValues returns all values of the enum
func FieldValues() []Field {
	return _FieldValues
}

// FieldStrings returns a slice of all String values of the enum
func FieldStrings() []string {
	strs := make([]string, len(_FieldNames))
	copy(strs, _FieldNames)
	return strs
}

// IsAField returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Field) IsAField() bool {
	for _, v := range _FieldValues {
		if i == v {
			return true
		}
	}
	return false
}

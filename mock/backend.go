// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cycloidio/cost-estimation (interfaces: Backend)

// Package mock is a generated GoMock package.
package mock

import (
	price "github.com/cycloidio/cost-estimation/price"
	product "github.com/cycloidio/cost-estimation/product"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Backend is a mock of Backend interface
type Backend struct {
	ctrl     *gomock.Controller
	recorder *BackendMockRecorder
}

// BackendMockRecorder is the mock recorder for Backend
type BackendMockRecorder struct {
	mock *Backend
}

// NewBackend creates a new mock instance
func NewBackend(ctrl *gomock.Controller) *Backend {
	mock := &Backend{ctrl: ctrl}
	mock.recorder = &BackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Backend) EXPECT() *BackendMockRecorder {
	return m.recorder
}

// Price mocks base method
func (m *Backend) Price() price.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Price")
	ret0, _ := ret[0].(price.Repository)
	return ret0
}

// Price indicates an expected call of Price
func (mr *BackendMockRecorder) Price() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Price", reflect.TypeOf((*Backend)(nil).Price))
}

// Product mocks base method
func (m *Backend) Product() product.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Product")
	ret0, _ := ret[0].(product.Repository)
	return ret0
}

// Product indicates an expected call of Product
func (mr *BackendMockRecorder) Product() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Product", reflect.TypeOf((*Backend)(nil).Product))
}
